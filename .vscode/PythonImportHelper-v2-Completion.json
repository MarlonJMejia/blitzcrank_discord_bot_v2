[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "tasks",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "discord.ext.commands.context",
        "description": "discord.ext.commands.context",
        "isExtraImport": true,
        "detail": "discord.ext.commands.context",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "discord.ext.commands.bot",
        "description": "discord.ext.commands.bot",
        "isExtraImport": true,
        "detail": "discord.ext.commands.bot",
        "documentation": {}
    },
    {
        "label": "discord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord",
        "description": "discord",
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "Embed",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "app_commands",
        "importPath": "discord",
        "description": "discord",
        "isExtraImport": true,
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "cycle",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "change_bot_status",
        "importPath": "tasks.status",
        "description": "tasks.status",
        "isExtraImport": true,
        "detail": "tasks.status",
        "documentation": {}
    },
    {
        "label": "TMate",
        "kind": 6,
        "importPath": "cogs.tmate",
        "description": "cogs.tmate",
        "peekOfCode": "class TMate(commands.Cog):\n    def __init__(self, bot: Bot):\n        self.bot = bot\n    @property\n    def uri(self):\n        result = \"\"\n        with open(\"./uri\", \"r\", encoding=\"utf-8\") as _file:\n            result = _file.read()\n        return result\n    def get_authorized_users(self):",
        "detail": "cogs.tmate",
        "documentation": {}
    },
    {
        "label": "intents",
        "kind": 5,
        "importPath": "slash_commands.test",
        "description": "slash_commands.test",
        "peekOfCode": "intents = discord.Intents.all()\nclient = discord.Client(intents=intents)\ntree = app_commands.CommandTree(client)\n@client.event\nasync def on_ready():\n    await tree.sync(guild=discord.Object(id=611027490848374811))\n    # print \"ready\" in the console when the bot is ready to work\n    print(\"ready\")\n# Add the guild ids in which the slash command will appear.\n# If it should be in all, remove the argument, but note that",
        "detail": "slash_commands.test",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "slash_commands.test",
        "description": "slash_commands.test",
        "peekOfCode": "client = discord.Client(intents=intents)\ntree = app_commands.CommandTree(client)\n@client.event\nasync def on_ready():\n    await tree.sync(guild=discord.Object(id=611027490848374811))\n    # print \"ready\" in the console when the bot is ready to work\n    print(\"ready\")\n# Add the guild ids in which the slash command will appear.\n# If it should be in all, remove the argument, but note that\n# it will take some time (up to an hour) to register the",
        "detail": "slash_commands.test",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "slash_commands.test",
        "description": "slash_commands.test",
        "peekOfCode": "tree = app_commands.CommandTree(client)\n@client.event\nasync def on_ready():\n    await tree.sync(guild=discord.Object(id=611027490848374811))\n    # print \"ready\" in the console when the bot is ready to work\n    print(\"ready\")\n# Add the guild ids in which the slash command will appear.\n# If it should be in all, remove the argument, but note that\n# it will take some time (up to an hour) to register the\n# command if it's for all guilds.",
        "detail": "slash_commands.test",
        "documentation": {}
    },
    {
        "label": "BOT_STATUSES",
        "kind": 5,
        "importPath": "tasks.status",
        "description": "tasks.status",
        "peekOfCode": "BOT_STATUSES = cycle(\n    [\n        \"'I'll fix her calm down' - Bob the Builder\",\n        \"A hammer can fix every problem.  Every.  Problem.\",\n        \"My IQ test results came back. They were negative.\",\n        \"Before you marry a person, make them use a computer with a slow Internet connection to see who they really are.\",\n        \"A Freudian slip is when you say one thing but mean your mother.\",\n        \"I remixed the remix... it was back to normal.\",\n        \"Alcoholism is a disease. But it's like the only disease you can get yelled at for having.\",\n        \"Dogs are forever in the pushup position.\",",
        "detail": "tasks.status",
        "documentation": {}
    },
    {
        "label": "decorator",
        "kind": 2,
        "importPath": "decorator_example",
        "description": "decorator_example",
        "peekOfCode": "def decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\ndef say_whee():\n    print(\"Whee!\")\n# @decorator\ndef easy_say_whee():",
        "detail": "decorator_example",
        "documentation": {}
    },
    {
        "label": "say_whee",
        "kind": 2,
        "importPath": "decorator_example",
        "description": "decorator_example",
        "peekOfCode": "def say_whee():\n    print(\"Whee!\")\n# @decorator\ndef easy_say_whee():\n    print(\"easy whee\")\neasy_say_whee()",
        "detail": "decorator_example",
        "documentation": {}
    },
    {
        "label": "easy_say_whee",
        "kind": 2,
        "importPath": "decorator_example",
        "description": "decorator_example",
        "peekOfCode": "def easy_say_whee():\n    print(\"easy whee\")\neasy_say_whee()",
        "detail": "decorator_example",
        "documentation": {}
    },
    {
        "label": "RequestModal",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class RequestModal(discord.ui.Modal, title=\"Make a request\"):\n    request = discord.ui.TextInput(\n        style=discord.TextStyle.long,\n        label=\"Message\",\n        required=True,\n        max_length=500,\n        placeholder=\"I'd like to learn more about ...\",\n    )\n    async def on_submit(self, interaction: discord.Interaction):\n        await interaction.response.send_message(",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "BOT_NAME",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "BOT_NAME = os.environ[\"BOT_NAME\"]\nclass RequestModal(discord.ui.Modal, title=\"Make a request\"):\n    request = discord.ui.TextInput(\n        style=discord.TextStyle.long,\n        label=\"Message\",\n        required=True,\n        max_length=500,\n        placeholder=\"I'd like to learn more about ...\",\n    )\n    async def on_submit(self, interaction: discord.Interaction):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "intents",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "intents = discord.Intents.all()\nintents.message_content = True\nbot = commands.Bot(command_prefix=\"!\", intents=intents)\n@bot.event\nasync def on_ready():\n    change_bot_status.start(bot)\n    try:\n        synced_commands = await bot.tree.sync()\n        logger.info(f\"Synced {len(synced_commands)}\")\n    except Exception as e:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "intents.message_content",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "intents.message_content = True\nbot = commands.Bot(command_prefix=\"!\", intents=intents)\n@bot.event\nasync def on_ready():\n    change_bot_status.start(bot)\n    try:\n        synced_commands = await bot.tree.sync()\n        logger.info(f\"Synced {len(synced_commands)}\")\n    except Exception as e:\n        logger.error(\"errors syncing commands\", e)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "bot = commands.Bot(command_prefix=\"!\", intents=intents)\n@bot.event\nasync def on_ready():\n    change_bot_status.start(bot)\n    try:\n        synced_commands = await bot.tree.sync()\n        logger.info(f\"Synced {len(synced_commands)}\")\n    except Exception as e:\n        logger.error(\"errors syncing commands\", e)\n@bot.tree.command()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "decorator",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def decorator(func):\n    count = 0\n    print(f\"outside begin: {count}\")\n    def wrapper():\n        nonlocal count\n        func()\n        print(f\"inside: {count}\")\n        count += 1\n    count += 5\n    print(f\"outside end: {count}\")",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "easy_say_whee",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def easy_say_whee():\n    pass\neasy_say_whee()\neasy_say_whee()\neasy_say_whee()\neasy_say_whee()",
        "detail": "test",
        "documentation": {}
    }
]